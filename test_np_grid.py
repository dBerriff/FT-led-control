# test_np_grid.py

""" test LED- and NeoPixel-related classes """

import asyncio
from collections import namedtuple
from machine import Pin
import json
from neo_pixel import PixelStrip


class PixelGrid(PixelStrip):
    """ extend NPStrip to support BTF-Lighting grid
        - grid is wired 'snake' style; coord_dict corrects
    """

    Coord = namedtuple('Coord', ['c', 'r'])
    
    Charset = {
        'A': (
            (0, 0, 0, 0, 0, 0, 0, 0),
            (0, 0, 0, 1, 1, 0, 0, 0),
            (0, 0, 1, 0, 0, 1, 0, 0),
            (0, 0, 1, 0, 0, 1, 0, 0),
            (0, 0, 1, 0, 0, 1, 0, 0),
            (0, 0, 1, 1, 1, 1, 0, 0),
            (0, 0, 1, 0, 0, 1, 0, 0),
            (0, 0, 1, 0, 0, 1, 0, 0)),
        'B': (
            (0, 0, 0, 0, 0, 0, 0, 0),
            (0, 0, 1, 1, 1, 0, 0, 0),
            (0, 0, 1, 0, 0, 1, 0, 0),
            (0, 0, 1, 0, 0, 1, 0, 0),
            (0, 0, 1, 1, 1, 0, 0, 0),
            (0, 0, 1, 0, 0, 1, 0, 0),
            (0, 0, 1, 0, 0, 1, 0, 0),
            (0, 0, 1, 1, 1, 0, 0, 0)),
        'C': (
            (0, 0, 0, 0, 0, 0, 0, 0),
            (0, 0, 0, 1, 1, 0, 0, 0),
            (0, 0, 1, 0, 0, 1, 0, 0),
            (0, 0, 1, 0, 0, 0, 0, 0),
            (0, 0, 1, 0, 0, 0, 0, 0),
            (0, 0, 1, 0, 0, 0, 0, 0),
            (0, 0, 1, 0, 0, 1, 0, 0),
            (0, 0, 0, 1, 1, 0, 0, 0)),
        'D': (
            (0, 0, 0, 0, 0, 0, 0, 0),
            (0, 0, 1, 1, 1, 0, 0, 0),
            (0, 0, 1, 0, 0, 1, 0, 0),
            (0, 0, 1, 0, 0, 1, 0, 0),
            (0, 0, 1, 0, 0, 1, 0, 0),
            (0, 0, 1, 0, 0, 1, 0, 0),
            (0, 0, 1, 0, 0, 1, 0, 0),
            (0, 0, 1, 1, 1, 0, 0, 0)),
        'E': (
            (0, 0, 0, 0, 0, 0, 0, 0),
            (0, 0, 1, 1, 1, 1, 0, 0),
            (0, 0, 1, 0, 0, 0, 0, 0),
            (0, 0, 1, 0, 0, 0, 0, 0),
            (0, 0, 1, 1, 1, 0, 0, 0),
            (0, 0, 1, 0, 0, 0, 0, 0),
            (0, 0, 1, 0, 0, 0, 0, 0),
            (0, 0, 1, 1, 1, 1, 0, 0)),
        'F': (
            (0, 0, 0, 0, 0, 0, 0, 0),
            (0, 0, 1, 1, 1, 1, 0, 0),
            (0, 0, 1, 0, 0, 0, 0, 0),
            (0, 0, 1, 0, 0, 0, 0, 0),
            (0, 0, 1, 1, 1, 0, 0, 0),
            (0, 0, 1, 0, 0, 0, 0, 0),
            (0, 0, 1, 0, 0, 0, 0, 0),
            (0, 0, 1, 0, 0, 0, 0, 0)),
        'G': (
            (0, 0, 0, 0, 0, 0, 0, 0),
            (0, 0, 0, 1, 1, 0, 0, 0),
            (0, 0, 1, 0, 0, 1, 0, 0),
            (0, 0, 1, 0, 0, 0, 0, 0),
            (0, 0, 1, 0, 0, 0, 0, 0),
            (0, 0, 1, 0, 1, 1, 0, 0),
            (0, 0, 1, 0, 0, 1, 0, 0),
            (0, 0, 0, 1, 1, 0, 0, 0)),
        'H': (
            (0, 0, 0, 0, 0, 0, 0, 0),
            (0, 0, 1, 0, 0, 1, 0, 0),
            (0, 0, 1, 0, 0, 1, 0, 0),
            (0, 0, 1, 0, 0, 1, 0, 0),
            (0, 0, 1, 1, 1, 1, 0, 0),
            (0, 0, 1, 0, 0, 1, 0, 0),
            (0, 0, 1, 0, 0, 1, 0, 0),
            (0, 0, 1, 0, 0, 1, 0, 0)),
        'I': (
            (0, 0, 0, 0, 0, 0, 0, 0),
            (0, 0, 0, 1, 1, 1, 0, 0),
            (0, 0, 0, 0, 1, 0, 0, 0),
            (0, 0, 0, 0, 1, 0, 0, 0),
            (0, 0, 0, 0, 1, 0, 0, 0),
            (0, 0, 0, 0, 1, 0, 0, 0),
            (0, 0, 0, 0, 1, 0, 0, 0),
            (0, 0, 0, 1, 1, 1, 0, 0)),
        'J': (
            (0, 0, 0, 0, 0, 0, 0, 0),
            (0, 0, 0, 0, 0, 1, 0, 0),
            (0, 0, 0, 0, 0, 1, 0, 0),
            (0, 0, 0, 0, 0, 1, 0, 0),
            (0, 0, 0, 0, 0, 1, 0, 0),
            (0, 0, 1, 0, 0, 1, 0, 0),
            (0, 0, 1, 0, 0, 1, 0, 0),
            (0, 0, 0, 1, 1, 0, 0, 0)),
        'K': (
            (0, 0, 0, 0, 0, 0, 0, 0),
            (0, 0, 1, 0, 0, 1, 0, 0),
            (0, 0, 1, 0, 0, 1, 0, 0),
            (0, 0, 1, 0, 1, 0, 0, 0),
            (0, 0, 1, 1, 0, 0, 0, 0),
            (0, 0, 1, 0, 1, 0, 0, 0),
            (0, 0, 1, 0, 0, 1, 0, 0),
            (0, 0, 1, 0, 0, 1, 0, 0)),
        'L': (
            (0, 0, 0, 0, 0, 0, 0, 0),
            (0, 0, 1, 0, 0, 0, 0, 0),
            (0, 0, 1, 0, 0, 0, 0, 0),
            (0, 0, 1, 0, 0, 0, 0, 0),
            (0, 0, 1, 0, 0, 0, 0, 0),
            (0, 0, 1, 0, 0, 0, 0, 0),
            (0, 0, 1, 0, 0, 0, 0, 0),
            (0, 0, 1, 1, 1, 1, 0, 0)),
        'M': (
            (0, 0, 0, 0, 0, 0, 0, 0),
            (0, 0, 1, 0, 0, 0, 1, 0),
            (0, 0, 1, 1, 0, 1, 1, 0),
            (0, 0, 1, 0, 1, 0, 1, 0),
            (0, 0, 1, 0, 0, 0, 1, 0),
            (0, 0, 1, 0, 0, 0, 1, 0),
            (0, 0, 1, 0, 0, 0, 1, 0),
            (0, 0, 1, 0, 0, 0, 1, 0)),
        'N': (
            (0, 0, 0, 0, 0, 0, 0, 0),
            (0, 0, 1, 0, 0, 1, 0, 0),
            (0, 0, 1, 0, 0, 1, 0, 0),
            (0, 0, 1, 1, 0, 1, 0, 0),
            (0, 0, 1, 0, 1, 1, 0, 0),
            (0, 0, 1, 0, 0, 1, 0, 0),
            (0, 0, 1, 0, 0, 1, 0, 0),
            (0, 0, 1, 0, 0, 1, 0, 0)),
        'O': (
            (0, 0, 0, 0, 0, 0, 0, 0),
            (0, 0, 0, 1, 1, 0, 0, 0),
            (0, 0, 1, 0, 0, 1, 0, 0),
            (0, 0, 1, 0, 0, 1, 0, 0),
            (0, 0, 1, 0, 0, 1, 0, 0),
            (0, 0, 1, 0, 0, 1, 0, 0),
            (0, 0, 1, 0, 0, 1, 0, 0),
            (0, 0, 0, 1, 1, 0, 0, 0)),
        'P': (
            (0, 0, 0, 0, 0, 0, 0, 0),
            (0, 0, 1, 1, 1, 0, 0, 0),
            (0, 0, 1, 0, 0, 1, 0, 0),
            (0, 0, 1, 0, 0, 1, 0, 0),
            (0, 0, 1, 1, 1, 0, 0, 0),
            (0, 0, 1, 0, 0, 0, 0, 0),
            (0, 0, 1, 0, 0, 0, 0, 0),
            (0, 0, 1, 0, 0, 0, 0, 0)),
        'Q': (
            (0, 0, 0, 0, 0, 0, 0, 0),
            (0, 0, 0, 1, 1, 0, 0, 0),
            (0, 0, 1, 0, 0, 1, 0, 0),
            (0, 0, 1, 0, 0, 1, 0, 0),
            (0, 0, 1, 0, 0, 1, 0, 0),
            (0, 0, 1, 0, 0, 1, 0, 0),
            (0, 0, 1, 0, 1, 0, 0, 0),
            (0, 0, 0, 1, 0, 1, 0, 0)),
        'R': (
            (0, 0, 0, 0, 0, 0, 0, 0),
            (0, 0, 1, 1, 1, 0, 0, 0),
            (0, 0, 1, 0, 0, 1, 0, 0),
            (0, 0, 1, 0, 0, 1, 0, 0),
            (0, 0, 1, 1, 1, 0, 0, 0),
            (0, 0, 1, 0, 0, 1, 0, 0),
            (0, 0, 1, 0, 0, 1, 0, 0),
            (0, 0, 1, 0, 0, 1, 0, 0)),
        'S': (
            (0, 0, 0, 0, 0, 0, 0, 0),
            (0, 0, 0, 1, 1, 0, 0, 0),
            (0, 0, 1, 0, 0, 1, 0, 0),
            (0, 0, 1, 0, 0, 0, 0, 0),
            (0, 0, 0, 1, 1, 0, 0, 0),
            (0, 0, 0, 0, 0, 1, 0, 0),
            (0, 0, 1, 0, 0, 1, 0, 0),
            (0, 0, 0, 1, 1, 0, 0, 0)),
        'T': (
            (0, 0, 0, 0, 0, 0, 0, 0),
            (0, 0, 1, 1, 1, 1, 1, 0),
            (0, 0, 0, 0, 1, 0, 0, 0),
            (0, 0, 0, 0, 1, 0, 0, 0),
            (0, 0, 0, 0, 1, 0, 0, 0),
            (0, 0, 0, 0, 1, 0, 0, 0),
            (0, 0, 0, 0, 1, 0, 0, 0),
            (0, 0, 0, 0, 1, 0, 0, 0)),
        'U': (
            (0, 0, 0, 0, 0, 0, 0, 0),
            (0, 0, 1, 0, 0, 1, 0, 0),
            (0, 0, 1, 0, 0, 1, 0, 0),
            (0, 0, 1, 0, 0, 1, 0, 0),
            (0, 0, 1, 0, 0, 1, 0, 0),
            (0, 0, 1, 0, 0, 1, 0, 0),
            (0, 0, 1, 0, 0, 1, 0, 0),
            (0, 0, 0, 1, 1, 0, 0, 0)),
        'V': (
            (0, 0, 0, 0, 0, 0, 0, 0),
            (0, 0, 1, 0, 0, 0, 1, 0),
            (0, 0, 1, 0, 0, 0, 1, 0),
            (0, 0, 1, 0, 0, 0, 1, 0),
            (0, 0, 1, 0, 0, 0, 1, 0),
            (0, 0, 1, 0, 0, 0, 1, 0),
            (0, 0, 0, 1, 0, 1, 0, 0),
            (0, 0, 0, 0, 1, 0, 0, 0)),
        'W': (
            (0, 0, 0, 0, 0, 0, 0, 0),
            (0, 0, 1, 0, 0, 0, 1, 0),
            (0, 0, 1, 0, 0, 0, 1, 0),
            (0, 0, 1, 0, 0, 0, 1, 0),
            (0, 0, 1, 0, 0, 0, 1, 0),
            (0, 0, 1, 0, 1, 0, 1, 0),
            (0, 0, 1, 0, 1, 0, 1, 0),
            (0, 0, 0, 1, 0, 1, 0, 0)),
        'X': (
            (0, 0, 0, 0, 0, 0, 0, 0),
            (0, 0, 1, 0, 0, 1, 0, 0),
            (0, 0, 1, 0, 0, 1, 0, 0),
            (0, 0, 1, 0, 0, 1, 0, 0),
            (0, 0, 0, 1, 1, 0, 0, 0),
            (0, 0, 1, 0, 0, 1, 0, 0),
            (0, 0, 1, 0, 0, 1, 0, 0),
            (0, 0, 1, 0, 0, 1, 0, 0)),
        'Y': (
            (0, 0, 0, 0, 0, 0, 0, 0),
            (0, 0, 1, 0, 0, 1, 0, 0),
            (0, 0, 1, 0, 0, 1, 0, 0),
            (0, 0, 1, 0, 0, 1, 0, 0),
            (0, 0, 0, 1, 1, 1, 0, 0),
            (0, 0, 0, 0, 0, 1, 0, 0),
            (0, 0, 1, 0, 0, 1, 0, 0),
            (0, 0, 0, 1, 1, 0, 0, 0)),
        'Z': (
            (0, 0, 0, 0, 0, 0, 0, 0),
            (0, 0, 1, 1, 1, 1, 0, 0),
            (0, 0, 0, 0, 0, 1, 0, 0),
            (0, 0, 0, 0, 0, 1, 0, 0),
            (0, 0, 0, 1, 1, 0, 0, 0),
            (0, 0, 1, 0, 0, 0, 0, 0),
            (0, 0, 1, 0, 0, 0, 0, 0),
            (0, 0, 1, 1, 1, 1, 0, 0)),
        '0': (
            (0, 0, 0, 0, 0, 0, 0, 0),
            (0, 0, 0, 1, 1, 0, 0, 0),
            (0, 0, 1, 0, 0, 1, 0, 0),
            (0, 0, 1, 0, 0, 1, 0, 0),
            (0, 0, 1, 0, 1, 1, 0, 0),
            (0, 0, 1, 1, 0, 1, 0, 0),
            (0, 0, 1, 0, 0, 1, 0, 0),
            (0, 0, 0, 1, 1, 0, 0, 0)),
        '1': (
            (0, 0, 0, 0, 0, 0, 0, 0),
            (0, 0, 0, 0, 1, 0, 0, 0),
            (0, 0, 0, 1, 1, 0, 0, 0),
            (0, 0, 0, 0, 1, 0, 0, 0),
            (0, 0, 0, 0, 1, 0, 0, 0),
            (0, 0, 0, 0, 1, 0, 0, 0),
            (0, 0, 0, 0, 1, 0, 0, 0),
            (0, 0, 0, 1, 1, 1, 0, 0)),
        '2': (
            (0, 0, 0, 0, 0, 0, 0, 0),
            (0, 0, 0, 1, 1, 0, 0, 0),
            (0, 0, 1, 0, 0, 1, 0, 0),
            (0, 0, 0, 0, 0, 1, 0, 0),
            (0, 0, 0, 0, 1, 0, 0, 0),
            (0, 0, 0, 1, 0, 0, 0, 0),
            (0, 0, 1, 0, 0, 0, 0, 0),
            (0, 0, 1, 1, 1, 1, 0, 0)),
        '3': (
            (0, 0, 0, 0, 0, 0, 0, 0),
            (0, 0, 0, 1, 1, 0, 0, 0),
            (0, 0, 1, 0, 0, 1, 0, 0),
            (0, 0, 0, 0, 0, 1, 0, 0),
            (0, 0, 0, 1, 1, 0, 0, 0),
            (0, 0, 0, 0, 0, 1, 0, 0),
            (0, 0, 1, 0, 0, 1, 0, 0),
            (0, 0, 0, 1, 1, 0, 0, 0)),
        '4': (
            (0, 0, 0, 0, 0, 0, 0, 0),
            (0, 0, 0, 0, 1, 1, 0, 0),
            (0, 0, 0, 1, 0, 1, 0, 0),
            (0, 0, 1, 0, 0, 1, 0, 0),
            (0, 0, 1, 1, 1, 1, 0, 0),
            (0, 0, 0, 0, 0, 1, 0, 0),
            (0, 0, 0, 0, 0, 1, 0, 0),
            (0, 0, 0, 0, 0, 1, 0, 0)),
        '5': (
            (0, 0, 0, 0, 0, 0, 0, 0),
            (0, 0, 1, 1, 1, 1, 0, 0),
            (0, 0, 1, 0, 0, 0, 0, 0),
            (0, 0, 1, 1, 1, 0, 0, 0),
            (0, 0, 0, 0, 0, 1, 0, 0),
            (0, 0, 0, 0, 0, 1, 0, 0),
            (0, 0, 0, 0, 0, 1, 0, 0),
            (0, 0, 1, 1, 1, 0, 0, 0)),
        '6': (
            (0, 0, 0, 0, 0, 0, 0, 0),
            (0, 0, 0, 0, 1, 0, 0, 0),
            (0, 0, 0, 1, 0, 0, 0, 0),
            (0, 0, 1, 0, 0, 0, 0, 0),
            (0, 0, 1, 1, 1, 0, 0, 0),
            (0, 0, 1, 0, 0, 1, 0, 0),
            (0, 0, 1, 0, 0, 1, 0, 0),
            (0, 0, 0, 1, 1, 0, 0, 0)),
        '7': (
            (0, 0, 0, 0, 0, 0, 0, 0),
            (0, 0, 1, 1, 1, 1, 0, 0),
            (0, 0, 0, 0, 0, 1, 0, 0),
            (0, 0, 0, 0, 1, 0, 0, 0),
            (0, 0, 0, 1, 0, 0, 0, 0),
            (0, 0, 0, 1, 0, 0, 0, 0),
            (0, 0, 0, 1, 0, 0, 0, 0),
            (0, 0, 0, 1, 0, 0, 0, 0)),
        '8': (
            (0, 0, 0, 0, 0, 0, 0, 0),
            (0, 0, 0, 1, 1, 0, 0, 0),
            (0, 0, 1, 0, 0, 1, 0, 0),
            (0, 0, 1, 0, 0, 1, 0, 0),
            (0, 0, 0, 1, 1, 0, 0, 0),
            (0, 0, 1, 0, 0, 1, 0, 0),
            (0, 0, 1, 0, 0, 1, 0, 0),
            (0, 0, 0, 1, 1, 0, 0, 0)),
        '9': (
            (0, 0, 0, 0, 0, 0, 0, 0),
            (0, 0, 0, 1, 1, 0, 0, 0),
            (0, 0, 1, 0, 0, 1, 0, 0),
            (0, 0, 1, 0, 0, 1, 0, 0),
            (0, 0, 0, 1, 1, 1, 0, 0),
            (0, 0, 0, 0, 0, 1, 0, 0),
            (0, 0, 0, 0, 1, 0, 0, 0),
            (0, 0, 0, 1, 0, 0, 0, 0)),
    }

    def __init__(self, np_pin, n_cols, n_rows, gamma=2.6):
        self.n_pixels = n_cols * n_rows
        super().__init__(Pin(np_pin, Pin.OUT), self.n_pixels, gamma)
        self.n_cols = n_cols
        self.n_rows = n_rows
        self.max_col = n_cols - 1
        self.max_row = n_rows - 1
        self.c_r_dim = self.Coord(self.n_cols, self.n_rows)
        self.coord_index = self.get_coord_index_dict()

    def get_coord_index_dict(self):
        """ correct grid addressing scheme
            - columns across, rows down as for most computer display software
        """
        coord_index_dict = {}
        max_row = self.n_rows - 1
        for col in range(self.n_cols):
            for row in range(self.n_rows):
                if col % 2:  # odd row
                    r = max_row - row
                else:
                    r = row
                coord_index_dict[col, row] = col * self.n_rows + r
        return coord_index_dict

    def coord_inc(self, coord):
        """ increment cell coordinate """
        c_ = coord.c + 1
        if c_ == self.c_r_dim.c:
            c_ = 0
            r_ = coord.r + 1
            if r_ == self.c_r_dim.r:
                r_ = 0
        else:
            r_ = coord.r
        return self.Coord(c_, r_)

    def coord_dec(self, coord):
        """ decrement cell coordinate """
        c_ = coord.c - 1
        if c_ == -1:
            c_ = self.c_r_dim.c - 1
            r_ = coord.r - 1
            if r_ == -1:
                r_ = self.c_r_dim.r - 1
        else:
            r_ = coord.r
        return self.Coord(c_, r_)

    def fill_row(self, row, rgb):
        """ fill row with rgb value"""
        for col in range(self.n_cols):
            index = self.coord_index[col, row]
            self[index] = rgb

    def fill_col(self, col, rgb):
        """ fill col with rgb value"""
        for row in range(self.n_rows):
            index = self.coord_index[col, row]
            self[index] = rgb

    def fill_diagonal(self, rgb, reverse=False):
        """ fill diagonallll with rgb value"""
        if reverse:
            for col in range(self.n_cols):
                r_col = self.max_col - col
                row = col
                index = self.coord_index[r_col, row]
                self[index] = rgb
        else:
            for col in range(self.n_cols):
                row = col
                index = self.coord_index[col, row]
                self[index] = rgb

    def fill_grid(self, rgb):
        """ fill grid with rgb value"""
        for index in range(self.n_pixels):
            self[index] = rgb


async def main():
    """ set NeoPixel values on grid """
    
    async def blank_pause():
        """ fill grid with (0, 0, 0) and pause 1s """
        npg.fill_grid(npg.OFF)
        npg.write()
        await asyncio.sleep_ms(200)

    pin_number = 27
    npg = PixelGrid(pin_number, 8, 8)
    vis_colours = npg.Colours
    vis_colours.pop('black')
    colour_list = list(vis_colours.keys())
    colour_list.sort()
    print(colour_list)
    # level defines brightness with respect to 255 peak
    level = 64

    char_set = npg.Charset
    
    await blank_pause()
    rgb = npg.get_rgb_l_g_c(vis_colours['green'], level)
    chars = list(char_set.keys())
    chars.sort()
    for c in chars:
        char_grid = char_set[c]
        for row in range(npg.n_rows):
            char_pixels = char_grid[row]
            for col in range(npg.n_cols):
                if char_pixels[col]:
                    index = npg.coord_index[col, row]
                    npg[index] = rgb
        npg.write()
        await asyncio.sleep_ms(1000)
        await blank_pause()
    await blank_pause()      


if __name__ == '__main__':
    try:
        asyncio.run(main())
    finally:
        asyncio.new_event_loop()  # clear retained state
        print('Execution complete')
